// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutApp.Entity;

#nullable disable

namespace WorkoutApp.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230927160822_addExerciseSeed")]
    partial class addExerciseSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("WorkoutApp.Entity.Entities.AppUser", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("WorkoutApp.Entity.Entities.Category", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4071),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4097),
                            IsDeleted = false,
                            Name = "Chest",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4116),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4118),
                            IsDeleted = false,
                            Name = "Back",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4125),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4126),
                            IsDeleted = false,
                            Name = "Arms",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4132),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4133),
                            IsDeleted = false,
                            Name = "Legs",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4140),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4141),
                            IsDeleted = false,
                            Name = "Shoulders",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 6,
                            AddedBy = -1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4153),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4154),
                            IsDeleted = false,
                            Name = "Abs",
                            UpdatedBy = -1
                        });
                });

            modelBuilder.Entity("WorkoutApp.Entity.Entities.Exercise", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = -1,
                            CategoryId = 1,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4164),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4166),
                            IsDeleted = false,
                            Name = "Bench Press",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = -1,
                            CategoryId = 2,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4175),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4176),
                            IsDeleted = false,
                            Name = "Lateral Pull Down",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = -1,
                            CategoryId = 3,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4183),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4184),
                            IsDeleted = false,
                            Name = "Dumbbell Curls",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = -1,
                            CategoryId = 4,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4191),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4192),
                            IsDeleted = false,
                            Name = "Squat",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = -1,
                            CategoryId = 5,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4198),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4200),
                            IsDeleted = false,
                            Name = "Overhead Press",
                            UpdatedBy = -1
                        },
                        new
                        {
                            Id = 6,
                            AddedBy = -1,
                            CategoryId = 6,
                            DateAdded = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4206),
                            DateUpdated = new DateTime(2023, 9, 27, 12, 8, 22, 803, DateTimeKind.Local).AddTicks(4208),
                            IsDeleted = false,
                            Name = "V-Ups",
                            UpdatedBy = -1
                        });
                });

            modelBuilder.Entity("WorkoutApp.Entity.Entities.Set", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Repitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("WorkoutApp.Entity.Entities.Exercise", b =>
                {
                    b.HasOne("WorkoutApp.Entity.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WorkoutApp.Entity.Entities.Set", b =>
                {
                    b.HasOne("WorkoutApp.Entity.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutApp.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
